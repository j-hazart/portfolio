---
import BaseLayout from "../layouts/BaseLayout.astro";
import colors from "../services/technoColor"
import close from "../assets/x-circle.svg"
import left from "../assets/left.svg"
import right from "../assets/right.svg"
import { getLangFromUrl, useAltTranslations} from '../i18n/utils';


const {frontmatter} = Astro.props
const allImages = await Astro.glob('/public/uploads/**/*');
const images = allImages.filter((img) => img.default.includes(frontmatter.imagesFolder))
const lang = getLangFromUrl(Astro.url);
const t = useAltTranslations(lang);
---
<BaseLayout 
title={`Jessy Hazart | ${frontmatter.title}`}
metadescription={frontmatter.description}
>
<main class="flex max-lg:flex-col max-w-7xl w-full min-h-full lg:h-[calc(100vh-6.25rem)] max-md:pt-8 pt-16 text-primary gap-16 relative">

    <section class="flex flex-col gap-8 flex-[3] min-h-full">
        <div>
            <h1 class="text-4xl font-bold capitalize max-md:text-center">{frontmatter.title}</h1>
            <p class="capitalize italic text-sm opacity-60">{`${t("from")} ${frontmatter.from} ${t("to")} ${frontmatter.to}`}</p>
        </div>
        <section class=" gap-4 flex flex-col">
            <slot />
        </section>

        <section class="md:max-h-[600px] justify-center items-center flex flex-col gap-4 mt-8 flex-1">
            <h2 class="text-3xl font-bold">{lang === "fr" ? "Galerie" : "Gallery"}</h2>
            <div class="container flex max-lg:flex-col gap-8 w-full  max-md:h-[50vh] h-full relative max-lg:hidden">
            {
                images.map((img, index) => <div id={`${index + 1}`} style={`background: url(${img.default});background-repeat:no-repeat; background-position: center;background-size:cover`} class="image w-full h-full bg-cover cursor-pointer bg-center bg-no-repeat flex-1 rounded-xl hover:flex-[12] transition-all ease-in-out duration-700"></div> )
            }
            </div>
            <div class="lg:hidden flex flex-wrap w-full gap-8 justify-center">
            {
                images.map((img, index) => <img class="rounded-xl md:w-[calc(50%-1rem)] sm:max-w-lg" src={img.default} alt={`${t("screenshot")} ${frontmatter.title} ${index + 1}`} width="755px" height="480px"/> )
            }
            </div>
        </section>
    </section>

    <aside class="flex-1 flex flex-col gap-8 h-full">
        <section class="flex bg-secondary p-4 rounded-xl">
            <div class="flex flex-col gap-4 flex-wrap items-center max-lg:w-full">
                <h2 class="text-xl font-bold">Technologies</h2>
                <div class="flex gap-2 flex-wrap justify-center">
                    {
                        frontmatter.tags.sort().map((tag) => <p style={`background-color:${colors[tag]+"30"};border:1px solid ${colors[tag]}`} class="text-center capitalize backdrop-brightness-200 rounded-full py-1 px-4 flex-1">{tag}</p>)
                    }
                </div>
            </div>
        </section>
    
        <section class="flex flex-col gap-4 items-center bg-secondary p-4 rounded-xl">
            <h2 class="text-xl font-bold">{lang === "fr" ? "Liens" : "Links"}</h2>
                <div class="flex gap-4 flex-wrap max-md:flex-col max-lg:w-full max-lg:justify-evenly">
                    {
                        frontmatter.website &&
                        <div class="flex flex-col items-center w-full">
                            <h3>Site web :</h3>
                            <a class="text-tertiary hover:underline text-center" href={frontmatter.website} target="_blank">{frontmatter.website}</a>
                        </div>
                    }
                    {
                        frontmatter.repo && 
                        <div class="flex flex-col items-center w-full">
                            <h3>Github :</h3>
                            <a class="text-tertiary hover:underline text-center" href={frontmatter.repo} target="_blank">{frontmatter.repo}</a>
                        </div>
                    }
                </div>   
        </section>
    </aside>
    
</main>
<figure id="figure" class="absolute z-10 hidden flex-col h-full w-full top-0 left-0 bg-[#0000009b] justify-center items-center gap-4">
    <div class="md:w-2/3 2xl:w-1/2 h-max relative flex justify-center">
        <img id="largeImg" class=" rounded-xl" src={images[0].default} alt={lang === "fr" ? `Capture d'Ã©cran ${frontmatter.title}` : `${frontmatter.title} screenshot`} width="755px" height="480px">
        <button id="leftButton" type="button" class="absolute top-1/2 -translate-y-1/2 -left-16"><img class="w-10" src={left} alt={t("left.arrow")}/></button>
        <button id="rightButton" type="button" class="absolute top-1/2 -translate-y-1/2 -right-16"><img class="w-10" src={right} alt={t("right.arrow")}/></button>
        <button id="closeButton" type="button" class="absolute -right-8 -top-8 text-primary">
            <img src={close} alt={t("button.close")}>
        </button>
    </div>
    <ul id="indicators" class="flex gap-8">
        {
            images.map(() => <li class="indicator w-2 h-2 bg-tertiary rounded-full"></li>)
        }
    </ul>
</figure>
</BaseLayout>

<style>
    .container:hover .image:not(:hover){
        opacity: 0.3;
    }

</style>
<script is:inline>
    const figure = document.querySelector("#figure");
    const largeImg = document.querySelector("#largeImg");
     
    const gallery = document.querySelector(".container");
    const images = gallery.children;
    const imagesMaxNumber = images.length;
    let currentImageId = 1;

    const indicators = document.querySelectorAll('.indicator');

    function getPath(url){
        return url.match(/url\("(.+)"\)/)[1];
    }

    [...images].forEach((img) => {
        img.addEventListener("click", (e) => {
            changeCurrentImage(largeImg, e.target, img.id)
            setCurrentIndicator(img.id - 1)
            figure.classList.toggle('hidden');
            figure.classList.toggle('flex');
        })
    })

    const closeButton = document.querySelector("#closeButton");
    closeButton.addEventListener("click", () => {
            figure.classList.toggle('hidden');
            figure.classList.toggle('flex');
        });

    function changeCurrentImage(oldImg, newImg, newImgId){
        oldImg.src = getPath(newImg.style.backgroundImage);
        currentImageId = parseInt(newImgId);
    }

    const leftButton = document.querySelector("#leftButton");
    const rightButton = document.querySelector("#rightButton");
    function switchImage(toRight = false){
            const id = currentImageId - 1;
            const comparator = toRight ? imagesMaxNumber : 1;
            const resetValue = toRight ? 0 : imagesMaxNumber - 1 ;
            const newId = currentImageId === comparator
            ? resetValue
            : toRight ? id + 1 : id - 1;

            const newImg = [...images][newId];
            changeCurrentImage(largeImg, newImg, newImg.id);
            setCurrentIndicator(newId)
        
    }
    
        leftButton.addEventListener("click", () => {
             switchImage();
        })

        rightButton.addEventListener("click", () => {
            switchImage(true);
        })

        function setCurrentIndicator(id){
            indicators.forEach((indicator) => {
                changeColor(indicator, true);
            })
            changeColor(indicators[id])
        }

        function changeColor(element, all = false){
                element.classList.add(all ? 'bg-primary' : 'bg-tertiary')
                element.classList.remove(all ? 'bg-tertiary' : 'bg-primary')
        }
    
    
</script>